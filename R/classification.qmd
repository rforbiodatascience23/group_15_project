---
title: "Logistic Regression Classification"
format:
  html:
    embed-resources: true
editor: visual
---

# Clear Workspace

```{r}
rm(list = ls())
```

# Load libraries

```{r}
#| message: false
library('tidyverse')
library('tidymodels')
```

# Load data

```{r}
#| message: false
diabetes_data <- read_tsv('../data/03_diabetes_data_augment.tsv',
                          na = 'NA')
```

The model should predict a DM/pre-DM diagnosis based on the variables found in the logistic regression analysis.

# Prepare data for model training

```{r}
model_data <- diabetes_data |> 
  filter(medication == 0) |> 
  drop_na() |> 
  select(diagnosis,height,armc,tri_skinfold,gh,creatinine,bmi,bfp) |> 
  mutate(diagnosis = factor(diagnosis))

```

# Prepare training and testing data

```{r}
set.seed(42)

#Split data for training (70%)/testing (30%)
data_split <- model_data |> 
  initial_split(prop = 0.7)

data_train <- training(data_split)
data_test <- testing(data_split)

```

# Set model specification

```{r}
logreg_spec <- logistic_reg() |> 
  set_engine("glm") |> 
  set_mode("classification")
```

# Train model

```{r}
logreg_fit <- logreg_spec |> 
  fit(diagnosis ~ ., 
      data = data_train)
  
```

# Test model

```{r}
prediction <- data_test |> 
  select(diagnosis) |> 
  bind_cols(logreg_fit |> 
              predict(new_data = data_test))

```

# Check accuracy

```{r}
accuracy(data = prediction, 
         truth = diagnosis,
         estimate = .pred_class)

```

# Confusion matrix

```{r}
conf_mat(data = prediction, 
         truth = diagnosis,
         estimate = .pred_class)
```

```{r}
eval_metrics <- metric_set(ppv, recall, accuracy, f_meas)

eval_metrics(data = prediction, 
             truth = diagnosis, 
             estimate = .pred_class)
```

```{r}
# Calculate the class probabilities
class_prob <- prediction |> 
  bind_cols(logreg_fit |>  
              predict(new_data = data_test, 
                      type = "prob"))

```

```{r}
#| message: false
# ROC graph
roc_plot <- class_prob |>  
  roc_curve(truth = diagnosis, 
            .pred_1,
            event_level = 'second') |> 
  ggplot(mapping = aes(x = 1-specificity,
                       y = sensitivity)) +
  geom_path() +
  geom_abline(slope = 1,
              linetype = 'dotted') +
  coord_fixed() +
  theme_minimal() +
  labs(title = 'ROC curve',
       x = 'False Positive Rate (1 - specificity)',
       y = 'True Positive Rate (sensitivity)') +
  theme_bw(base_size = 14) +
  theme(plot.title = element_text(hjust = 0.5)) 

roc_plot

ggsave(plot = roc_plot,
       filename = '../results/classification_ROC_curve.png',
       device = 'png')

```

# AUC

```{r}
class_prob |> 
  roc_auc(diagnosis,
          .pred_1,
          event_level = 'second')
```
